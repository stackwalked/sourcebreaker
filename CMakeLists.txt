# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS cmake.toml)
endif()

# Variables
set(SAFETYHOOK_FETCH_ZYDIS ON)

project(sourcebreaker
	LANGUAGES
		C
		CXX
)

# Enable multi-core compilation universally
set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

include(FetchContent)

# Fix warnings about DOWNLOAD_EXTRACT_TIMESTAMP
if(POLICY CMP0135)
	cmake_policy(SET CMP0135 NEW)
endif()
message(STATUS "Fetching safetyhook (v0.5.4)...")
FetchContent_Declare(safetyhook
	GIT_REPOSITORY
		"https://github.com/cursey/safetyhook"
	GIT_TAG
		v0.5.4
)
FetchContent_MakeAvailable(safetyhook)

# Target: memtools
set(memtools_SOURCES
	cmake.toml
	"src/memtools/address.hpp"
	"src/memtools/detail/result.hpp"
	"src/memtools/dll.hpp"
	"src/memtools/memtools.cpp"
)

add_library(memtools STATIC)

target_sources(memtools PRIVATE ${memtools_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${memtools_SOURCES})

target_compile_features(memtools PUBLIC
	cxx_std_23
)

target_link_libraries(memtools PUBLIC
	safetyhook::safetyhook
)

# Target: tfsdk
set(tfsdk_SOURCES
	cmake.toml
	"src/tfsdk/game.hpp"
	"src/tfsdk/init.cpp"
)

add_library(tfsdk STATIC)

target_sources(tfsdk PRIVATE ${tfsdk_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${tfsdk_SOURCES})

target_compile_features(tfsdk PUBLIC
	cxx_std_23
)

# Target: sourcebreaker
set(sourcebreaker_SOURCES
	cmake.toml
	"src/sourcebreaker/main.cpp"
	"src/sourcebreaker/thirdparty.hpp"
)

add_library(sourcebreaker SHARED)

target_sources(sourcebreaker PRIVATE ${sourcebreaker_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${sourcebreaker_SOURCES})

target_compile_features(sourcebreaker PUBLIC
	cxx_std_23
)

target_include_directories(sourcebreaker PUBLIC
	"src/"
)

target_link_libraries(sourcebreaker PUBLIC
	memtools
	tfsdk
)

# Target: mapper
set(mapper_SOURCES
	cmake.toml
	"src/mapper/main.cpp"
)

add_executable(mapper)

target_sources(mapper PRIVATE ${mapper_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${mapper_SOURCES})

target_compile_features(mapper PRIVATE
	cxx_std_23
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT mapper)
endif()
